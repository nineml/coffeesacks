buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "3.1.0"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.5'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.docker.DockerContainer

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}"
  }
}

configurations {
  transform.extendsFrom documentation
}

dependencies {
  implementation (
    [group: 'org.nineml', name: grinderName, version: grinderVersion],
    [group: 'org.nineml', name: filterName, version: filterVersion],
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: '10.6'],
  )
  testImplementation (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.2'],
    [group: 'org.junit.platform', name: 'junit-platform-console-standalone', version: '1.7.1'],
  )
  testRuntimeOnly (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'],
    [group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.4.2'],
    [group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.8.2']
  )
  documentation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion]
  )
}

println("Building with Java version ${System.getProperty('java.version')}")

buildConfig {
  packageName('org.nineml.coffeesacks')
  buildConfigField('String', 'TITLE', "\"${sacksTitle}\"")
  buildConfigField('String', 'VERSION', "\"${sacksVersion}\"")
}

ext {
  c_coffeesacks = "coffeesacks"
}

docker_container.configure {
  workingDir = "docker"
}

// ============================================================

jar {
  archiveBaseName = "${sacksTitle}-${sacksVersion}"
  manifest {
    attributes 'Built-By': 'Norman Walsh'
    attributes 'Implementation-Vendor': 'Norman Walsh'
    attributes 'Implementation-Title': sacksTitle
    attributes 'Implementation-Version': sacksVersion
  }
}

javadoc {
  //inputs.file "${projectDir}/src/main/java/overview.html"
  inputs.files fileTree(dir: "${projectDir}/src/main")

  title 'An Invisible XML Parsing API'
  exclude 'org/nineml/coffeesacks/model/**'
  exclude 'org/nineml/coffeesacks/utils/**'
  exclude 'org/nineml/coffeesacks/BuildConfig.java'
  exclude 'org/nineml/coffeesacks/parser/CommonBuilder.java'
  options.showFromPublic()
  //options.overview = 'src/main/java/overview.html'
  options.encoding('utf-8')
  options.docEncoding('utf-8')
  options.charSet('utf-8')
}

task dist(dependsOn:["test", "jar", "javadoc"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${buildDir}/docs"
      into "${buildDir}/stage/docs"
    }
  }
  doLast {
    copy {
      from "${projectDir}/README.md"
      into "${buildDir}/stage/docs"
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${sacksName}-${sacksVersion}"
  archiveFileName = "${sacksName}-${sacksVersion}.zip"
}
dist.finalizedBy zipDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ['generateBuildConfig']) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
}

// ============================================================

task website(type: SaxonXsltTask, dependsOn: ["copyResources", "javadoc"]) {
  inputs.files fileTree(dir: "${projectDir}/tools", include: "*.xsl")
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  outputs.files fileTree(dir: "${buildDir}/website")

  input "${projectDir}/src/website/xml/coffeesacks.xml"
  output "${buildDir}/website/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  args(['-init:org.docbook.xsltng.extensions.Register'])
  parameters (
    'relax-ng-grammar': "${projectDir}/website/docbook.rng",
    'mediaobject-input-base-uri': "file:${buildDir}/aug/",
    'mediaobject-output-base-uri': "/",
    'chunk': 'index.html',
    'chunk-output-base-uri': "${projectDir}/build/website/",
    'coffeesacks-version': sacksVersion,
    'coffeegrinder-version': grinderVersion,
    'coffeefilter-version': filterVersion
  )
}

task website_javadoc(type: Copy, dependsOn: ["javadoc"]) {
  from javadoc.destinationDir
  into "${buildDir}/website/apidoc"
}
website.finalizedBy website_javadoc

task copyResources(dependsOn: ["copyJarResources", "copyStaticResources"]) {
  // nop
}

task copyJarResources() {
  outputs.files fileTree(dir: "${buildDir}/website")

  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/org"
  }
}

task copyStaticResources() {
  inputs.files fileTree(dir: "${projectDir}/website/resources")
  inputs.files fileTree(dir: "${projectDir}/src/website/resources")
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  outputs.files fileTree(dir: "${buildDir}/website")
  outputs.files fileTree(dir: "${buildDir}/aug")

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/src/website/resources"
    }
  }

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/website/resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/website/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/aug/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/resources/images"
      into "${buildDir}/aug/images"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/examples"
      into "${buildDir}/website/examples"
    }
  }
}

// ============================================================

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = sacksTitle
        packaging = 'jar'
        description = 'Saxon extension functions for Invisible XML'
        url = 'https://github.com/nineml/coffeesacks'

        scm {
          url = 'scm:git@github.com:nineml/coffeesacks.git'
          connection = 'scm:git@github.com:nineml/coffeesacks.git'
          developerConnection = 'scm:git@github.com:nineml/coffeesacks.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "org.nineml"
      artifactId = sacksName
      version = sacksVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = project.findProperty("sonatypeUsername") ?: "NOUSER"
        password = project.findProperty("sonatypePassword") ?: "NOPASS"
      }
    }
  }
}

// ============================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_coffeesacks)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "coffeesacks"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_coffeesacks)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "coffeesacks"]
      }
    }
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
