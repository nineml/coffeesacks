<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xi='http://www.w3.org/2001/XInclude'
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.2">
<info>
<mediaobject role="cover">
  <imageobject>
    <imagedata fileref="images/CoffeeSacks.png"/>
  </imageobject>
</mediaobject>
<title>CoffeeSacks</title>
<subtitle>A Saxon API for Invisible XML</subtitle>
<author>
  <personname>Norm Tovey Walsh</personname>
</author>
<copyright><year>2022</year><holder>Norm Tovey-Walsh</holder></copyright>
<productname>coffeesacks</productname>
<productnumber>@@VERSION@@</productnumber>
<bibliomisc role="coffeegrinder">@@GRINDERVERSION@@</bibliomisc>
<bibliomisc role="coffeefilter">@@FILTERVERSION@@</bibliomisc>
</info>

<preface>
<title>Introduction</title>

<para>CoffeeSacks provides a set of
<link xlink:href="https://saxonica.com/">Saxon</link> extension functions
for processing Invisible XML. It is part of the
<link xlink:href="https://nineml.org/">NineML</link> family of Invisible
XML tools.</para>

</preface>

<chapter>
<title>Invisible XML in Saxon</title>

<para>The CoffeeSacks extension functions allow a stylesheet to load
an Invisible XML grammar and process an input against it. Grammar processing
can be expensive. To mitigate this cost, by default CoffeeSacks keeps a cache
of parsed grammar.</para>

<para>The class <classname>org.nineml.coffeesacks.RegisterCoffeeSacks</classname>
is suitable for registering the extension functions to a Saxon HE processor.</para>

<para>All of the functions are in the namespace
<uri>http://nineml.com/ns/coffeesacks</uri> which is taken to be bound to
the <code>cs:</code> namespace prefix in this document.</para>

<para>Given an Invisible XML grammar for dates in <uri>dates.ixml</uri>:</para>

<programlisting>date: s?, day, -s, month, (-s, year)? .
-s: -" "+ .
day: digit, digit? .
-digit: "0"; "1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9".
month: "January"; "February"; "March"; "April";
       "May"; "June"; "July"; "August";
       "September"; "October"; "November"; "December".
year: (digit, digit)?, digit, digit .</programlisting>

<para>A stylesheet like the following will parse a string against that
grammar and return the result:</para>

<programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:cs="http://nineml.com/ns/coffeesacks"
                exclude-result-prefixes="#all"
                version="3.0">

<xsl:template name="xsl:initial-template">
  <xsl:variable name="grammar" select="cs:grammar-uri('date.ixml')"/>
  <doc>
    <xsl:sequence select="cs:parse-string($grammar, '15 February 2022')"/>
  </doc>
</xsl:template>

</xsl:stylesheet>]]></programlisting>

<para>Returning:</para>

<programlisting><![CDATA[<doc>
   <date>
      <day>15</day>
      <month>February</month>
      <year>2022</year>
   </date>
</doc>]]></programlisting>

</chapter>

<chapter xml:id="loading-grammars">
<title>Loading grammars</title>

<para>Before it can be used, a grammar must be loaded. You can load Invisible XML
grammars in either the text or XML syntax. You can also load grammars in the
<link xlink:href="https://coffeegrinder.nineml.org/">CoffeeGrinder</link> compiled
format.</para>

<para>The grammar loading functions return an XML document. If the
function succeeds, this will be a compiled representation of the
grammar. It is not very useful except as the grammar input to one of
<link linkend="parsing-inputs">the parsing functions</link>.
(If you’re interested in a useful XML
representation of an Invisible XML grammar, parse the grammar with the
Invisible XML grammar.)</para>

<para>If the grammar could not be loaded, what will be returned will
be a <tag>cs:error</tag> document (where the <code>cs</code> prefix is
bound to
<uri type="xmlnamespace">https://ninenl.org/ns/coffeesacks/error</uri>).
This document will have a <tag class="attribute">code</tag> attribute
that attempts to identify the error. The contents of the error
document will further describe the error.</para>

<para>The only code returned by the grammar functions is
<code>badgrammar</code>, indicating that the attempt to parse the grammar
failed.</para>

<section>
<title>cs:grammar-string</title>

<para>This function takes a string in the Invisible XML grammar format and parses
it into a grammar. You can load the XML grammar formats directly as XML. You can load
grammars from URIs with <function>cs:grammar-uri</function>.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>node()</type>
<function>cs:grammar-string</function>
</funcdef>
<paramdef>
<type>xs:string</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The Invisible XML grammar in text format</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>node()</type>
<function>cs:grammar-string</function>
</funcdef>
<paramdef>
<type>xs:string</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The Invisible XML grammar in text format</phrase>
</paramdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Grammar options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>type</code></term>
<listitem>
<para>Identifies the type of grammar to parse. The only value
accepted is <code>ixml</code>, the text format.</para>
<para>It is an error to specify any other value.</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section>
<title>cs:grammar-uri</title>

<para>This function loads a grammar from a URI.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>node()</type>
<function>cs:grammar-uri</function>
</funcdef>
<paramdef>
<type>xs:string</type>
<parameter>href</parameter>
<phrase role="refpurpose">The grammar location</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>node()</type>
<function>cs:grammar-uri</function>
</funcdef>
<paramdef>
<type>xs:string</type>
<parameter>href</parameter>
<phrase role="refpurpose">The grammar location</phrase>
</paramdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Grammar options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>cache</code></term>
<listitem>
<para>If unspecified or specified with the value “<code>true</code>”
or “<code>yes</code>”, the grammar will be cached. If any other value
is specified, the grammar will not be cached.
</para>
<para>Caching the grammar saves the mapping between the URI and the
parsed XML node.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>type</code></term>
<listitem>
<para>Identifies the type of grammar to parse:</para>
  <variablelist>
  <varlistentry>
  <term><code>ixml</code></term>
  <listitem>
  <para>For Invisible XML in text format.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>xml</code> or <code>vxml</code></term>
  <listitem>
  <para>For Invisible XML in XML format.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>cxml</code> or <code>compiled</code></term>
  <listitem>
  <para>For a grammar in the compiled
<link xlink:href="https://coffeegrinder.nineml.org/">CoffeeGrinder</link> format.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
<para>It is an error to specify any other value.</para>
<para>This is not usually necessary. The grammar compiler will “sniff” the first 4,095
bytes of the file to identify the grammar which is usually sufficient.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>encoding</code></term>
<listitem>
<para>Specifies the encoding to use for Invisible XML grammars in the text format.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>

<chapter xml:id="parsing-inputs">
<title>Parsing inputs</title>

<para>The parsing functions attempts to parse the input string with
the grammar provided. The result will be an XML document (or a map)
that is either the parsed result or a document that specifies that an
error occurred.</para>

<para>The grammar provided must be in XML format. This can be obtained
with the <link linkend="loading-grammars">grammar loading
functions</link> or, in the case of XML format grammars, through any
convenient means.</para>

<para>The parsing functions return an XML document (or a map). If the
parse is successful, this will be a representation of the result of
parsing the input with the grammar.</para>

<para>If the parse is unsuccessful, a top-level <tag>ixml:state</tag>
attribute (or property) with the value “<code>fail</code>” indicates
that the parse did not succeed. The rest of the document will contain
information that is designed to help you identify the error.</para>

<para>If the grammar could not be used, what will be returned will
be a <tag>cs:error</tag> document (where the <code>cs</code> prefix is
bound to
<uri type="xmlnamespace">https://ninenl.org/ns/coffeesacks/error</uri>).
This document will have a <tag class="attribute">code</tag> attribute
that attempts to identify the error. The contents of the error
document will further describe the error.</para>

<para>(If a JSON result was requested, the error document will have a
<code>cs:error</code> property with the value of the code.)</para>

<para>The possible codes are <code>notgrammar</code>, if the input
grammar was not a recognized XML representation of an Invisible XML
grammar, or <code>notxml</code>, if the input grammar was not
XML.</para>

<section>
<title>cs:parse-string</title>

<para>Parses an input string against a grammar.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>item()</type>
<function>cs:parse-string</function>
</funcdef>
<paramdef>
<type>node</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The ixml grammar</phrase>
</paramdef>
<paramdef>
<type>xs:string</type>
<parameter>input</parameter>
<phrase role="refpurpose">The input</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>item()</type>
<function>cs:parse-string</function>
</funcdef>
<paramdef>
<type>node</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The ixml grammar</phrase>
</paramdef>
<paramdef>
<type>xs:string</type>
<parameter>input</parameter>
<phrase role="refpurpose">The input</phrase>
</paramdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Parsing options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>cache</code></term>
<listitem>
<para>If unspecified or specified with the value “<code>true</code>”
or “<code>yes</code>”, the grammar will be cached. If any other value
is specified, the grammar will not be cached.
</para>
<para>Caching at this level saves the mapping between the XML representation
of the grammar and the underlying Invisible XML parser object.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>format</code></term>
<listitem>
<para>Identifies the format of the result:</para>
  <variablelist>
  <varlistentry>
  <term><code>xml</code></term>
  <listitem>
  <para>Returns an XML node.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>json</code> or <code>json-data</code></term>
  <listitem>
  <para>Returns a “data” map. This method will fail if the result contains mixed content.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>json-tree</code> or <code>json-text</code></term>
  <listitem>
  <para>Returns a “text” map. This map structure can represent any tree.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
<para>It is an error to specify any other value.</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section>
<title>cs:parse-uri</title>

<para>Loads the document at the specified URI and attempts to parse it with
the grammar provided.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>item()</type>
<function>cs:parse-uri</function>
</funcdef>
<paramdef>
<type>node</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The ixml grammar</phrase>
</paramdef>
<paramdef>
<type>xs:string</type>
<parameter>href</parameter>
<phrase role="refpurpose">The document location</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>item()</type>
<function>cs:parse-uri</function>
</funcdef>
<paramdef>
<type>node</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The ixml grammar</phrase>
</paramdef>
<paramdef>
<type>xs:string</type>
<parameter>href</parameter>
<phrase role="refpurpose">The document location</phrase>
</paramdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Parsing options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>cache</code></term>
<listitem>
<para>If unspecified or specified with the value “<code>true</code>”
or “<code>yes</code>”, the grammar will be cached. If any other value
is specified, the grammar will not be cached.
</para>
<para>Caching at this level saves the mapping between the XML representation
of the grammar and the underlying Invisible XML parser object.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>encoding</code></term>
<listitem>
<para>Specifies the encoding to use for the input document.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>format</code></term>
<listitem>
<para>Identifies the format of the result:</para>
  <variablelist>
  <varlistentry>
  <term><code>xml</code></term>
  <listitem>
  <para>Returns an XML node.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>json</code> or <code>json-data</code></term>
  <listitem>
  <para>Returns a “data” map. This method will fail if the result contains mixed content.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>json-text</code> or <code>json-text</code></term>
  <listitem>
  <para>Returns a “text” map. This map structure can represent any tree.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
<para>It is an error to specify any other value.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>

<chapter>
<title>cs:hygiene-report</title>

<para>Get a hygiene report for a grammar. The hygiene report will
contain information about unproductive rules and
undefined, unused, or unproductive symbols.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>node()</type>
<function>cs:hygiene-report</function>
</funcdef>
<paramdef>
<type>node</type>
<parameter>grammar</parameter>
<phrase role="refpurpose">The ixml grammar</phrase>
</paramdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Grammar options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>cache</code></term>
<listitem>
<para>If unspecified or specified with the value “<code>true</code>”
or “<code>yes</code>”, the grammar will be cached. If any other value
is specified, the grammar will not be cached.
</para>
<para>Caching at this level saves the mapping between the XML representation
of the grammar and the underlying Invisible XML parser object.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>format</code></term>
<listitem>
<para>Identifies the format of the result:</para>
  <variablelist>
  <varlistentry>
  <term><code>xml</code></term>
  <listitem>
  <para>Returns an XML node.
  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><code>json</code></term>
  <listitem>
  <para>Returns a map.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
<para>It is an error to specify any other value.</para>
</listitem>
</varlistentry>
</variablelist>

<para>It returns a report.</para>

<para>Consider the following grammar:</para>

<programlisting>S: A ; B .
A: 'a', X .
B: 'b', Y .
X: 'x' .
Z: 'z' .</programlisting>

<para>It contains unused and undefined nonterminals.</para>

<para>The XML report is in the
<uri type="namespace">http://nineml.com/ns/coffeegrinder</uri> namespace.
This is an example report for this grammar:</para>

<programlisting language="xml"><![CDATA[<report xmlns="http://nineml.com/ns/coffeegrinder"
        clean="false">
   <undefined>
      <symbol>Y</symbol>
   </undefined>
   <unreachable>
      <symbol>Z</symbol>
   </unreachable>
   <unproductive>
      <symbol>Y</symbol>
      <rule>B ⇒ 'b', Y</rule>
      <rule>S ⇒ B</rule>
   </unproductive>
</report>]]></programlisting>

<para>In JSON, the report would be:</para>

<programlisting language="json">{
  "report": {
    "unproductive": [
      "B",
      "B ⇒ 'b', Y",
      "S ⇒ B"
    ],
    "unreachable": [
      "Z"
    ],
    "clean": false,
    "undefined": [
      "Y"
    ]
  }
}</programlisting>

</chapter>

<chapter>
<title>cs:parser-options</title>

<para>Set the parser options to use in subsequent parses.
</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>xs:boolean</type>
<function>cs:parser-options</function>
</funcdef>
<paramdef>
<type>map(xs:string, xs:string)</type>
<parameter>options</parameter>
<phrase role="refpurpose">Parser options</phrase>
</paramdef>
</funcprototype>
</funcsynopsis>

<para>The following options are recognized:</para>

<variablelist>
<varlistentry>
<term><code>ignoreTrailingWhitespace</code>, boolean</term>
<listitem>
<para>If true, trailing whitespace on the document input string is
ignored.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>suppressAmbiguousState</code>, boolean</term>
<listitem>
<para>If a parse is ambiguous, Invisible XML mandates that an
<tag class="attribute">ixml:state</tag> attribute be added to the root
element contining the value <code>ambiguous</code>. If this option
is true, that state will be suppressed.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>suppressPrefixState</code>, boolean</term>
<listitem>
<para>If a parse consumes only a (proper) prefix of the input,
Invisible XML mandates that an
<tag class="attribute">ixml:state</tag> attribute be added to the root
element contining the value <code>prefix</code>. If this option
is true, that state will be suppressed.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>allowUndefinedSymbols</code>, boolean</term>
<listitem>
<para>If true, the parser will attempt to use a grammar that contains
undefined symbols.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>allowUnreachableSymbols</code>, boolean</term>
<listitem>
<para>If true, the parser will attempt to use a grammar that contains
unreachable symbols.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>allowUnproductiveSymbols</code>, boolean</term>
<listitem>
<para>If true, the parser will attempt to use a grammar that contains
unproductive symbols.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>allowMultipleDefinitions</code>, boolean</term>
<listitem>
<para>If true, the parser will attempt to use a grammar that contains
multiple definitions for a given nonterminal.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>allowMultipleDefinitions</code>, boolean</term>
<listitem>
<para>If true, the parser will attempt to use a grammar that contains
multiple definitions for a given nonterminal.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>showMarks</code>, boolean</term>
<listitem>
<para>If true, the parser will return all of the nonterminals in your
grammar as elements, irrespective of their marks. The actual mark will
be returned in an <code>ixml:mark</code> attribute.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>showBnfNonterminals</code>, boolean</term>
<listitem>
<para>If true, the parser will return all of the otherwise hidden nonterminals
used in the parse.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>parser</code>, string</term>
<listitem>
<para>Selects the parser type, “<code>Earley</code>” for the Earley parser
and “<code>GLL</code>” for the GLL parser. The Earley parser is the default.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>The function will log errors (unrecognized options or values).
It will return false if any errors occur, otherwise it returns true.
</para>

<para>Changing parser options causes the cache to be cleared.</para>
</chapter>

<chapter>
<title>cs:clear-cache</title>

<para>Clears the grammar cache.</para>

<funcsynopsis>
<funcprototype>
<funcdef>
<type>xs:boolean</type>
<function>cs:clear-cache</function>
</funcdef>
<void/>
</funcprototype>
</funcsynopsis>

<para>Returns true if it clears the cache which, practically speaking,
it always does.</para>

</chapter>

<chapter>
<title>RegisterCoffeeSacks</title>

<para>The class <classname>org.nineml.coffeesacks.RegisterCoffeeSacks</classname>
can be passed to the Saxon processor on the command line as the value of the
<option>-init</option> option to register the extension functions.</para>

<para>To use this class within your own application code, instantiate the class
and pass the underlying configuration to the <methodname>initialize</methodname> method:
</para>

<programlisting language="java" linenumbering="unnumbered"
>RegisterCoffeeSacks register = new RegisterCoffeeSacks();
register.initialize(processor.getUnderlyingConfiguration());</programlisting>

<para>This will register the functions with the processor.</para>

</chapter>

</book>
