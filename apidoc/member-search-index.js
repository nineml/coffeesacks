memberSearchIndex = [{"p":"org.nineml.coffeesacks","c":"XmlXdmWriter","l":"addNode(XdmNode)","url":"addNode(net.sf.saxon.s9api.XdmNode)"},{"p":"org.nineml.coffeesacks","c":"NamespaceUtils","l":"addToMap(NamespaceMap, String, String)","url":"addToMap(net.sf.saxon.om.NamespaceMap,java.lang.String,java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"AlternativeEventBuilder(Processor, String, ParserOptions)","url":"%3Cinit%3E(net.sf.saxon.s9api.Processor,java.lang.String,org.nineml.coffeefilter.ParserOptions)"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"COFFEE_SACKS_ERROR_NAMESPACE"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"COFFEE_SACKS_ERROR_PREFIX"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"CoffeeSacksException(String, String, Location, Sequence)","url":"%3Cinit%3E(java.lang.String,java.lang.String,net.sf.saxon.s9api.Location,net.sf.saxon.om.Sequence)"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"CoffeeSacksException(String, String, Location)","url":"%3Cinit%3E(java.lang.String,java.lang.String,net.sf.saxon.s9api.Location)"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"CoffeeSacksException(String, String, Throwable)","url":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.Throwable)"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"CoffeeSacksException(String, String)","url":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"CommonDefinition(Configuration)","url":"%3Cinit%3E(net.sf.saxon.Configuration)"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"cs_namespace"},{"p":"org.nineml.coffeesacks","c":"URIUtils","l":"cwd()"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"cxml"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"debug(String, String, Object...)","url":"debug(java.lang.String,java.lang.String,java.lang.Object...)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"ELLIPSIS"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"endNonterminal(NonterminalSymbol, Map<String, String>, int, int)","url":"endNonterminal(org.nineml.coffeegrinder.parser.NonterminalSymbol,java.util.Map,int,int)"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_BAD_GRAMMAR"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_BAD_INPUT_FORMAT"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_BAD_OPTIONS"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_BAD_OUTPUT_FORMAT"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_HTTP_INF_LOOP"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_HTTP_LOOP"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_INVALID_CHOOSE_FUNCTION"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_INVALID_GRAMMAR"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_NAMESPACE_CONSTRUCTION"},{"p":"org.nineml.coffeesacks","c":"CoffeeSacksException","l":"ERR_TREE_CONSTRUCTION"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"error(String, String, Object...)","url":"error(java.lang.String,java.lang.String,java.lang.Object...)"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"FOLLOW_REDIRECT_LIMIT"},{"p":"org.nineml.coffeesacks","c":"NamespaceUtils","l":"fqName(QName)","url":"fqName(net.sf.saxon.s9api.QName)"},{"p":"org.nineml.coffeesacks","c":"NamespaceUtils","l":"fqName(String, String, String)","url":"fqName(java.lang.String,java.lang.String,java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"getArgumentTypes()"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"getArgumentTypes()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"getArgumentTypes()"},{"p":"org.nineml.coffeesacks","c":"XmlXdmWriter","l":"getDocument()"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"getFunctionQName()"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"getFunctionQName()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"getFunctionQName()"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"getMaximumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"getMaximumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"getMaximumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"getMinimumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"getMinimumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"getMinimumNumberOfArguments()"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"getResultType(SequenceType[])","url":"getResultType(net.sf.saxon.value.SequenceType[])"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"getResultType(SequenceType[])","url":"getResultType(net.sf.saxon.value.SequenceType[])"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"getResultType(SequenceType[])","url":"getResultType(net.sf.saxon.value.SequenceType[])"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"HygieneReportFunction(Configuration)","url":"%3Cinit%3E(net.sf.saxon.Configuration)"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"info(String, String, Object...)","url":"info(java.lang.String,java.lang.String,java.lang.Object...)"},{"p":"org.nineml.coffeesacks","c":"RegisterCoffeeSacks","l":"initialize(Configuration)","url":"initialize(net.sf.saxon.Configuration)"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"ixml_state"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"LoadGrammar(Configuration)","url":"%3Cinit%3E(net.sf.saxon.Configuration)"},{"p":"org.nineml.coffeesacks","c":"CommonDefinition","l":"logcategory"},{"p":"org.nineml.coffeesacks","c":"HygieneReportFunction","l":"makeCallExpression()"},{"p":"org.nineml.coffeesacks","c":"LoadGrammar","l":"makeCallExpression()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"makeCallExpression()"},{"p":"org.nineml.coffeesacks","c":"MakeParser","l":"MakeParser(Configuration)","url":"%3Cinit%3E(net.sf.saxon.Configuration)"},{"p":"org.nineml.coffeesacks","c":"NamespaceUtils","l":"NamespaceUtils()","url":"%3Cinit%3E()"},{"p":"org.nineml.coffeesacks","c":"URIUtils","l":"newURI(String)","url":"newURI(java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"URIUtils","l":"normalizeURI(String)","url":"normalizeURI(java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"NamespaceUtils","l":"qName(QNameValue)","url":"qName(net.sf.saxon.value.QNameValue)"},{"p":"org.nineml.coffeesacks","c":"RegisterCoffeeSacks","l":"RegisterCoffeeSacks()","url":"%3Cinit%3E()"},{"p":"org.nineml.coffeesacks","c":"URIUtils","l":"resolve(URI, String)","url":"resolve(java.net.URI,java.lang.String)"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"SacksLogger(Logger)","url":"%3Cinit%3E(net.sf.saxon.lib.Logger)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"setChooseAlternative(XPathContext, UserFunctionReference.BoundUserFunction)","url":"setChooseAlternative(net.sf.saxon.expr.XPathContext,net.sf.saxon.functions.hof.UserFunctionReference.BoundUserFunction)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"startAlternative(ForestNode, List<RuleChoice>)","url":"startAlternative(org.nineml.coffeegrinder.parser.ForestNode,java.util.List)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"startNonterminal(NonterminalSymbol, Map<String, String>, int, int)","url":"startNonterminal(org.nineml.coffeegrinder.parser.NonterminalSymbol,java.util.Map,int,int)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"startTree()"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"trace(String, String, Object...)","url":"trace(java.lang.String,java.lang.String,java.lang.Object...)"},{"p":"org.nineml.coffeesacks","c":"URIUtils","l":"URIUtils()","url":"%3Cinit%3E()"},{"p":"org.nineml.coffeesacks","c":"SacksLogger","l":"warn(String, String, Object...)","url":"warn(java.lang.String,java.lang.String,java.lang.Object...)"},{"p":"org.nineml.coffeesacks","c":"AlternativeEventBuilder","l":"xmlAlternatives(ForestNode, List<RuleChoice>)","url":"xmlAlternatives(org.nineml.coffeegrinder.parser.ForestNode,java.util.List)"},{"p":"org.nineml.coffeesacks","c":"XmlXdmWriter","l":"XmlXdmWriter(Processor)","url":"%3Cinit%3E(net.sf.saxon.s9api.Processor)"}]